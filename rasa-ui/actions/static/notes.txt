Below is a comprehensive `README.md` file for your project, tailored to your setup in `rasa-ui/actions/static/` with the provided `requirements.txt`, `Dockerfile`, `server.py`, and `docker-compose.yml`. It explains the purpose of each file, how the code works, and provides instructions for setting up, running, and testing the application. The `README.md` assumes your project is part of a larger chatbot system (`abacws-chatbot`) but focuses on the static file server component.

---

# Static File Server for ABACWS Chatbot

This project is a Flask-based static file server designed to serve files from the `attachments/` directory, integrated into the `abacws-chatbot` system. It runs in a Docker container using Gunicorn for production-grade performance, with logging and a health check endpoint for monitoring. The server is configured to serve files securely and efficiently, with proper permissions and a non-root user for enhanced security.

The project resides in the `rasa-ui/actions/static/` directory of the `abacws-chatbot` repository and is managed using Docker Compose.

## file sharing api structure 

```
rasa-ui/actions/static/
├── Dockerfile
├── docker-compose.yml
├── requirements.txt
├── server.py
├── attachments/
│   ├── test.txt  # Example file (add your files here)
├── logs/
│   ├── app.log  # Application logs (created at runtime)
```

- `Dockerfile`: Defines the container image, installing dependencies and setting up the Flask application with Gunicorn.
- `docker-compose.yml`: Orchestrates the container, mapping ports and volumes for logs and attachments.
- `requirements.txt`: Lists Python dependencies for the Flask application.
- `server.py`: The Flask application serving static files and a health endpoint.
- `attachments/`: Directory containing files to serve (e.g., `test.txt`).
- `logs/`: Directory for application logs, persisted from the container.

## Prerequisites

- Docker: Install [Docker Desktop](https://www.docker.com/products/docker-desktop/) for Windows, macOS, or Linux.
- Docker Compose: Included with Docker Desktop or install separately (`docker-compose` CLI).
- Windows PowerShell (optional): For Windows users to run commands.
- A working directory at `C:\_PHD_\Github\abacws-chatbot\rasa-ui\actions\static\` (adjust paths for other systems).

## Setup Instructions

### 1. Clone the Repository
If not already done, clone the `abacws-chatbot` repository:
```bash
git clone <repository-url>
cd rasa-ui/actions/static
```

### 2. Create Required Directories
Ensure the `logs/` and `attachments/` directories exist:
```bash
mkdir -p logs attachments
chmod -R 755 logs attachments
```

Add a test file to `attachments/` for verification:
```bash
echo "Hello, World!" > attachments/test.txt
```

### 3. File Descriptions

#### `requirements.txt`
Defines Python dependencies for the Flask application:
```
flask==2.0.3
requests==2.27.1
gunicorn==20.1.0
werkzeug==2.0.3
```

- `flask==2.0.3`: Web framework for serving static files and the health endpoint.
- `requests==2.27.1`: HTTP client library (unused in current `server.py` but included for potential future use).
- `gunicorn==20.1.0`: WSGI server for running Flask in production.
- `werkzeug==2.0.3`: Utility library for Flask, pinned to ensure compatibility.

#### `Dockerfile`
Builds a lightweight, secure container image based on `python:3.9-slim`:
- Sets the working directory to `/app`.
- Installs dependencies from `requirements.txt`.
- Copies `server.py` and `attachments/` to the container.
- Creates a `logs/` directory for application logs.
- Sets permissions (`755` for directories, `644` for files in `attachments/`).
- Runs as a non-root user (`appuser`) for security.
- Exposes port `8000` and runs Gunicorn with 4 workers.

Key commands:
```dockerfile
RUN pip install --no-cache-dir -r requirements.txt
COPY server.py .
COPY attachments/ attachments/
RUN chmod -R 755 /app/logs /app/attachments && chmod -R 644 /app/attachments/*
CMD ["gunicorn", "-w", "4", "-b", "0.0.0.0:8000", "--log-level", "info", "--access-logfile", "-", "--error-logfile", "-", "server:app"]
```

#### `server.py`
A Flask application that:
- Serves files from `/app/attachments/` via the `/attachments/<path:filename>` endpoint.
- Provides a `/health` endpoint returning `{"status": "healthy"}`.
- Configures logging to `/app/logs/app.log` with rotation (10MB max, 5 backups).
- Checks for the existence of the `attachments/` directory at startup.

Key code snippets:
```python
STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), "attachments")
if not os.path.exists(STATIC_FOLDER):
    raise FileNotFoundError(f"Attachments folder {STATIC_FOLDER} does not exist")

@app.route("/attachments/<path:filename>")
def serve_static(filename):
    try:
        logger.info(f"Serving file: {filename}")
        return send_from_directory(STATIC_FOLDER, filename)
    except FileNotFoundError:
        logger.error(f"File not found: {filename}")
        abort(404)

@app.route("/health")
def health():
    return {"status": "healthy"}, 200
```

#### `docker-compose.yml`
Orchestrates the `action_server_static_sharing` service:
- Builds the image from `Dockerfile` in the current directory (`rasa-ui/actions/static/`).
- Maps port `8000` on the host to `8000` in the container.
- Mounts `logs/` and `attachments/` as volumes for persistence and file access.
- Sets environment variables for unbuffered Python output and Gunicorn logging.
- Configures automatic restarts (`unless-stopped`).

Content:
```yaml
version: '3.8'

services:
  action_server_static_sharing:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - GUNICORN_CMD_ARGS=--log-level=info
    volumes:
      - ./logs:/app/logs
      - ./attachments:/app/attachments:ro
    restart: unless-stopped
```

### Running the Application

1. Navigate to the Project Directory:
   ```bash
   cd rasa-ui/actions/static
   ```

2. Build the Docker Image:
   ```bash
   docker-compose build action_server_static_sharing
   ```

3. Start the Container:
   Run in detached mode to keep it in the background:
   ```bash
   docker-compose up -d action_server_static_sharing
   ```

4. Verify the Container is Running:
   ```bash
   docker-compose ps
   ```
   Expected output:
   ```
   Name                                   Command               State           Ports
   --------------------------------------------------------------------------------
   abacws-chatbot-action_server_static_sharing-1   gunicorn -w 4 -b 0.0.0.0:8 ...   Up      0.0.0.0:8000->8000/tcp
   ```

### Testing the Application

Test the endpoints to ensure the server is working correctly.

#### On Windows (PowerShell)
```powershell
# Test health endpoint
curl http://localhost:8000/health
# Expected: {"status": "healthy"}

# Test static file
curl http://localhost:8000/attachments/test.txt
# Expected: Hello, World!
```

Alternatively, for cleaner output:
```powershell
(Invoke-WebRequest -Uri http://localhost:8000/health).Content
(Invoke-WebRequest -Uri http://localhost:8000/attachments/test.txt).Content
```

#### On Linux/macOS
```bash
curl http://localhost:8000/health
# Expected: {"status": "healthy"}

curl http://localhost:8000/attachments/test.txt
# Expected: Hello, World!
```

#### Browser
- Open `http://localhost:8000/health` to see `{"status": "healthy"}`.
- Open `http://localhost:8000/attachments/test.txt` to download or view `test.txt`.

### Checking Logs

- Container Logs:
  ```bash
  docker-compose logs action_server_static_sharing
  ```
  Look for Gunicorn startup messages and request logs.

- Application Logs:
  ```bash
  cat rasa-ui/actions/static/logs/app.log
  ```
  Or on Windows:
  ```powershell
  Get-Content rasa-ui\actions\static\logs\app.log
  ```
  Expected entries:
  ```
  2025-04-10 12:00:01,123 - __main__ - INFO - Health check requested
  2025-04-10 12:00:02,456 - __main__ - INFO - Serving file: test.txt
  ```

### Stopping the Application
To stop and remove the container:
```bash
docker-compose down
```

### Troubleshooting

1. Container Exits Immediately:
   - Check logs:
     ```bash
     docker-compose logs action_server_static_sharing
     ```
   - Ensure `attachments/` exists and contains files:
     ```bash
     ls -l rasa-ui/actions/static/attachments/
     ```
   - Verify `logs/` exists:
     ```bash
     mkdir -p rasa-ui/actions/static/logs
     chmod -R 755 rasa-ui/actions/static/logs
     ```

2. Connection Refused on `localhost:8000`:
   - Confirm port mapping in `docker-compose.yml` (`8000:8000`).
   - Check if port `8000` is in use:
     ```powershell
     netstat -a | findstr :8000
     ```
     If occupied, change the host port (e.g., `8001:8000`) and rebuild.

3. 404 Not Found for Files:
   - Verify files exist in `rasa-ui/actions/static/attachments/`.
   - Check case sensitivity in URLs (e.g., `test.txt` vs. `Test.txt`).

4. Permission Issues:
   - Ensure host directories are accessible:
     ```bash
     chmod -R 755 rasa-ui/actions/static/logs rasa-ui/actions/static/attachments
     ```
   - On Windows, if Docker Desktop complains about file sharing:
     - Open Docker Desktop > Settings > Resources > File Sharing.
     - Add `C:\_PHD_\Github\abacws-chatbot`.

5. Dependency Errors:
   - If `ImportError` occurs, verify `requirements.txt` includes `werkzeug==2.0.3`.
   - Rebuild with no cache:
     ```bash
     docker-compose build --no-cache action_server_static_sharing
     ```

### Production Notes

- Security: The `Dockerfile` uses a non-root user (`appuser`) and sets strict permissions (`644` for files, `755` for directories).
- Logging: Logs are persisted to `rasa-ui/actions/static/logs/app.log` with rotation to prevent disk overflow.
- Scalability: Gunicorn runs with 4 workers. Adjust `-w` in `Dockerfile` based on CPU cores (e.g., `2-4 per core`).
- HTTPS: For production, add a reverse proxy (e.g., Nginx) for SSL. Update `docker-compose.yml` to include an Nginx service if needed.
- Monitoring: Use the `/health` endpoint with tools like Prometheus to monitor the service.

### Contributing

This static file server is part of the `abacws-chatbot` project. To contribute:
1. Fork the repository.
2. Create a feature branch (`git checkout -b feature-name`).
3. Update files in `rasa-ui/actions/static/`.
4. Test locally with `docker-compose up -d`.
5. Submit a pull request.

### License

[Specify your license, e.g., MIT, or refer to the main `abacws-chatbot` repository’s license.]

---

### Notes on the `README.md`
- Clarity: Explains each file’s purpose, how they work together, and their role in the Flask application.
- Instructions: Provides step-by-step setup, running, and testing commands, with PowerShell examples for Windows users.
- Troubleshooting: Addresses common issues like those you encountered (e.g., missing `logs/`, `ImportError`, permissions).
- Context: Ties the service to `abacws-chatbot`, assuming it’s part of a larger Rasa-based system.
- Flexibility: Includes commands for both PowerShell and bash to cover your Windows environment and potential Linux/macOS use.

### Next Steps
1. Create `README.md` in `rasa-ui/actions/static/`:
   ```bash
   cd rasa-ui/actions/static
   echo "[Paste the above content]" > README.md
   ```
   Or use a text editor to save it.

2. Test the setup to ensure everything works:
   ```powershell
   cd C:\_PHD_\Github\abacws-chatbot\rasa-ui\actions\static
   docker-compose up -d action_server_static_sharing
   curl http://localhost:8000/health
   curl http://localhost:8000/attachments/test.txt
   ```

3. If you want to add more details (e.g., integration with other `abacws-chatbot` components, specific license, or additional endpoints), let me know, and I can update the `README.md`.

If you hit any issues implementing this or need further tweaks, share the details, and I’ll assist!